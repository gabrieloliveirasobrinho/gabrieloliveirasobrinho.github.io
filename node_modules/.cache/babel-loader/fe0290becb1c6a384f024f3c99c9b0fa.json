{"ast":null,"code":"console.clear();\nvar s = Snap();\nvar sMaxX = 800;\nvar sMaxY = 600;\nvar viewBoxList = [0, 0, sMaxX, sMaxY];\ns.attr({\n  viewBox: viewBoxList\n});\nvar gLines = s.g();\nvar gText = s.g();\nvar patt;\nvar maskObj;\nvar text;\nvar maskElem = s.mask();\nvar pSize = 700;\nvar maxLines = 16;\nvar maxLinesDouble = maxLines * 2;\nvar lineStep = pSize / maxLines;\nvar lines = [];\nvar pathDur = 1000;\nvar delay = 250;\nvar colorSteps = maxLines / 2;\nvar colors = ['purple', 'crimson', 'orangered', 'orange', 'gold', 'yellowgreen', 'steelblue', 'teal', 'purple'];\nvar lineLength = Math.sqrt(Math.pow(pSize, 2) * 2);\n\nvar lineObj = function () {\n  var d = 'M' + [pSize, 0, 0, pSize];\n  var path = s.path(d);\n  var pos = 0;\n  var addMask = false;\n  var pathDelay = 0;\n  var dashArray = 0;\n  var strokeW = 0;\n\n  this.init = function (params) {\n    pos = params.pos;\n    strokeW = params.strokeW;\n    var strokeColor = params.color || 'hotpink';\n    var offsetX = params.offsetX || 0;\n    var x = pSize - lineStep * (pos + .5) + offsetX;\n    var translateParams = [x, 0];\n    pathDelay = params.delay || delay;\n    dashArray = lineLength;\n    addMask = params.addMask || false;\n    path.attr({\n      transform: 'translate(' + translateParams + ')',\n      'stroke-width': strokeW,\n      stroke: strokeColor,\n      'stroke-linecap': 'square',\n      'stroke-dashoffset': lineLength,\n      'stroke-dasharray': dashArray\n    });\n    gLines.add(path);\n  }; // Init\n\n\n  this.reset = function () {\n    path.attr({\n      'stroke-dashoffset': lineLength,\n      'stroke-dasharray': dashArray\n    });\n  };\n\n  this.animdDelay = function () {\n    setTimeout(pathAnim, (maxLinesDouble - pos) * pathDelay);\n  };\n\n  var countNextAnim = 0;\n\n  function runNextAnim() {\n    if (addMask == true) {\n      // Why 0?\n      if (pos == 0) {\n        countNextAnim++;\n        maskObj.maskAnim();\n      }\n    }\n  }\n\n  function pathAnim() {\n    path.animate({\n      'stroke-dashoffset': '0'\n    }, pathDur, runNextAnim);\n  }\n}; // lineObj\n// ------------------------------------\n\n\nfunction createLines(params) {\n  var strokeW = params.strokeW;\n\n  for (var i = 0; i < maxLinesDouble; i++) {\n    var line = new lineObj();\n    var color = params.color || colors[i % colorSteps];\n    line.init({\n      pos: i,\n      strokeW: params.strokeW,\n      offsetX: params.offsetX,\n      delay: params.delay,\n      addMask: params.addMask || false,\n      color: color\n    });\n    lines.push(line);\n  }\n} // ------------------------------------\n\n\nfunction createPattern() {\n  //     console.log('* - createPattern');\n  var rect = s.rect(0, 0, pSize, pSize);\n  rect.attr({\n    fill: 'white'\n  });\n  gLines.add(rect);\n  createLines({\n    strokeW: lineStep / 1.4,\n    addMask: false\n  });\n  createLines({\n    strokeW: 2,\n    color: '#002',\n    offsetX: lineStep / 2 + 7,\n    delay: 300,\n    addMask: true\n  });\n  patt = gLines.toPattern(0, 0, pSize, pSize);\n}\n\nfunction animatePattern() {\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    line.reset();\n    line.animdDelay();\n  }\n} // ------------------------------------\n\n\nvar textObj = function () {\n  var textDur = 1500;\n  var dashoffset = 1200;\n  var textGInit = s.g();\n  var text1 = s.text('50%', '34%', 'Hello');\n  var text2 = s.text('50%', '73%', 'world');\n  text1.attr({\n    dy: '.3em',\n    'font-size': '1.15em'\n  });\n  text2.attr({\n    dy: '.3em'\n  });\n  textGInit.add(text1, text2);\n  textGInit.attr({\n    'text-anchor': 'middle',\n    'font': '15em/1 Impact',\n    fill: 'white',\n    stroke: '#000',\n    'stroke-width': 3,\n    'stroke-dasharray': dashoffset,\n    'stroke-dashoffset': dashoffset\n  });\n  var textGFill = textGInit.clone();\n  textGInit.attr({\n    transform: 'translate(10,10)'\n  });\n  gText.add(textGInit, textGFill);\n\n  this.textAnim = function () {\n    textGFill.animate({\n      'stroke-dashoffset': 0\n    }, textDur, setTextStroke);\n  };\n\n  function setTextStroke() {\n    setTextFill();\n    textGInit.animate({\n      'stroke-dashoffset': 0\n    }, textDur);\n  }\n\n  function setTextFill() {\n    animatePattern();\n    textGFill.attr({\n      fill: patt\n    });\n  }\n\n  this.reset = function () {\n    var initState = {\n      fill: 'white',\n      'stroke-dasharray': dashoffset,\n      'stroke-dashoffset': dashoffset\n    };\n    textGInit.attr(initState);\n    textGFill.attr(initState);\n    this.textAnim();\n  };\n}; // ------------------------------------\n\n\nfunction createText() {\n  //     console.log('* - createText');\n  text = new textObj();\n  text.textAnim();\n} // ------------------------------------\n\n\nvar maskObjInit = function () {\n  var maskShape;\n  var currentStep = 0;\n  var steps = [{\n    rx: '10%',\n    ry: \"10%\"\n  }, {\n    rx: '35%',\n    ry: \"35%\"\n  }, {\n    rx: '0%',\n    ry: \"0%\"\n  }];\n\n  this.init = function () {\n    maskShape = s.ellipse('50%', '50%', '100%', '100%');\n    maskShape.attr({\n      fill: \"white\"\n    });\n    maskElem.add(maskShape);\n    gText.attr({\n      mask: maskElem\n    });\n  };\n\n  this.maskAnim = function () {\n    //         console.log('- * - anim mask');\n    if (currentStep == steps.length) {\n      setTimeout(reRun, 1000);\n      return;\n    }\n\n    maskShape.animate(steps[currentStep], 300, maskObj.maskAnim);\n    currentStep++;\n  };\n\n  this.reset = function () {\n    currentStep = 0;\n    var initState = {\n      rx: '100%',\n      ry: \"100%\"\n    };\n    maskShape.attr(initState);\n  };\n};\n\nfunction createMask() {\n  //     console.log('* - createMask');\n  maskObj = new maskObjInit();\n  maskObj.init();\n} // ------------------------------------\n\n\ncreatePattern();\ncreateText();\ncreateMask();\n\nfunction reRun() {\n  maskObj.reset();\n  text.reset();\n}\n/*var wrapper = document.createElement(\"div\");\ndocument.body.appendChild(wrapper);\nwrapper.appendChild(s.node);*/","map":{"version":3,"sources":["/Users/mac/Downloads/MasterPorffolio/src/components/Loader/LoaderLogo.js"],"names":["console","clear","s","Snap","sMaxX","sMaxY","viewBoxList","attr","viewBox","gLines","g","gText","patt","maskObj","text","maskElem","mask","pSize","maxLines","maxLinesDouble","lineStep","lines","pathDur","delay","colorSteps","colors","lineLength","Math","sqrt","pow","lineObj","d","path","pos","addMask","pathDelay","dashArray","strokeW","init","params","strokeColor","color","offsetX","x","translateParams","transform","stroke","add","reset","animdDelay","setTimeout","pathAnim","countNextAnim","runNextAnim","maskAnim","animate","createLines","i","line","push","createPattern","rect","fill","toPattern","animatePattern","length","textObj","textDur","dashoffset","textGInit","text1","text2","dy","textGFill","clone","textAnim","setTextStroke","setTextFill","initState","createText","maskObjInit","maskShape","currentStep","steps","rx","ry","ellipse","reRun","createMask"],"mappings":"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","sourcesContent":["console.clear();\n\nvar s = Snap();\nvar sMaxX = 800;\nvar sMaxY = 600;\nvar viewBoxList = [0, 0, sMaxX, sMaxY];\ns.attr({\n    viewBox: viewBoxList\n});\n\nvar gLines = s.g();\nvar gText = s.g();\nvar patt;\nvar maskObj;\nvar text;\nvar maskElem = s.mask();\n\nvar pSize = 700;\nvar maxLines = 16;\nvar maxLinesDouble = maxLines * 2;\nvar lineStep = pSize / maxLines;\nvar lines = [];\nvar pathDur = 1000;\nvar delay = 250;\n\nvar colorSteps = maxLines / 2;\nvar colors = ['purple',\n              'crimson',\n              'orangered',\n              'orange',\n              'gold',\n              'yellowgreen',\n              'steelblue',\n              'teal',\n              'purple'\n             ]\n\nvar lineLength = Math.sqrt( Math.pow( pSize, 2 ) * 2);\n\n\nvar lineObj = function () {\n    var d = 'M' + [pSize, 0, 0, pSize];\n    var path = s.path(d);\n    var pos = 0;\n    var addMask = false;\n    var pathDelay = 0;\n    var dashArray = 0;\n    var strokeW = 0;\n    \n    this.init = function ( params ) {\n        pos = params.pos;\n        strokeW = params.strokeW;\n        var strokeColor = params.color || 'hotpink'\n        var offsetX = params.offsetX || 0;\n        var x = pSize - lineStep * (pos + .5) + offsetX;\n        var translateParams = [x, 0];\n        \n        pathDelay = params.delay || delay;\n        dashArray = lineLength;\n        addMask = params.addMask || false;\n\n        path.attr({\n            transform: 'translate(' + translateParams + ')',\n            'stroke-width': strokeW,\n            stroke: strokeColor,\n            'stroke-linecap': 'square',\n            'stroke-dashoffset': lineLength,\n            'stroke-dasharray': dashArray\n        });\n        \n        gLines.add(path);\n        \n    }// Init\n    \n    this.reset = function () {\n        path.attr({\n            'stroke-dashoffset': lineLength,\n            'stroke-dasharray': dashArray\n        });\n    }\n    \n    this.animdDelay = function() {\n        setTimeout(pathAnim, \n                   (maxLinesDouble - pos) * pathDelay\n                  );\n    }\n    \n    var countNextAnim = 0;\n    \n    function runNextAnim() {\n        if ( addMask == true ) {\n            // Why 0?\n            if ( pos == 0) {\n                countNextAnim++;\n                \n                maskObj.maskAnim();\n            }\n        }\n    }\n    \n    function pathAnim () {\n\n        path.animate({\n            'stroke-dashoffset': '0'\n        \t},\n\t\t\tpathDur,\n\t\t\trunNextAnim\n            );\n    }\n    \n}// lineObj\n\n// ------------------------------------\n\nfunction createLines( params ) {\n    \n    var strokeW = params.strokeW;\n    \n    for ( var i = 0; i < maxLinesDouble; i++ ) {\n        var line = new lineObj;\n        var color = params.color || colors[i % colorSteps];\n        \n        line.init({\n            pos: i,\n            strokeW: params.strokeW,\n            offsetX: params.offsetX,\n            delay: params.delay,\n            addMask: params.addMask || false,\n            color: color,\n        });\n        \n        lines.push(line);\n    }\n}\n\n// ------------------------------------\n\nfunction createPattern() {\n    \n//     console.log('* - createPattern');\n    \n    var rect = s.rect(0,0, pSize, pSize);\n    rect.attr({\n        fill: 'white',\n    });\n    \n    gLines.add(rect);\n    \n    createLines({\n        strokeW: lineStep / 1.4,\n        addMask: false\n        });\n    \n    createLines({\n        strokeW: 2,\n        color: '#002',\n        offsetX: lineStep / 2 + 7,\n        delay: 300,\n        addMask: true\n    \t});\n    \n  \tpatt = gLines.toPattern(0,0, pSize, pSize);    \n    \n}\n\nfunction animatePattern() {\n  \n    for ( var i = 0; i < lines.length; i++ ) {\n        var line = lines[i];\n        \n        line.reset();\n        line.animdDelay();\n    }\n}\n\n// ------------------------------------\n\nvar textObj = function () {\n    \n    var textDur = 1500;\n    var dashoffset = 1200;\n    var textGInit = s.g();\n        var text1 = s.text('50%','34%','Hello');\n        var text2 = s.text('50%','73%','world');\n\n    text1.attr({\n       dy: '.3em',\n       'font-size': '1.15em'\n    });\n    text2.attr({\n       dy: '.3em'\n    });\n    \n    textGInit.add(text1, text2);\n\n    textGInit.attr({\n        'text-anchor': 'middle',\n        'font': '15em/1 Impact',\n        fill: 'white',\n        stroke: '#000',\n        'stroke-width': 3,\n        'stroke-dasharray': dashoffset,\n        'stroke-dashoffset': dashoffset\n    });\n\n    var textGFill = textGInit.clone();\n\n    textGInit.attr({\n        transform: 'translate(10,10)'\n    });\n    \n    gText.add(textGInit, textGFill);\n    \n    this.textAnim = function () {\n        textGFill.animate({\n            'stroke-dashoffset': 0\n\t        },\n            textDur,\n            setTextStroke);\n    }\n    \n    function setTextStroke () {\n        setTextFill();\n        \n        textGInit.animate({\n            'stroke-dashoffset': 0\n            },\n            textDur\n            );\n    }\n    \n    function setTextFill () {\n        \n        animatePattern();\n        \n        textGFill.attr({\n            fill: patt\n        });\n    }\n    \n    this.reset = function () {\n        \n        var initState = {\n            fill: 'white',\n            'stroke-dasharray': dashoffset,\n            'stroke-dashoffset': dashoffset\n        };\n        \n        textGInit.attr( initState );\n        textGFill.attr( initState );\n        \n        this.textAnim();\n    }\n}\n\n// ------------------------------------\n\nfunction createText() {\n//     console.log('* - createText');\n    text = new textObj;\n    text.textAnim();\n}\n\n// ------------------------------------\n\nvar maskObjInit = function () {\n    var maskShape;\n    \n    var currentStep = 0;\n    var steps = [\n        {rx: '10%', ry: \"10%\"},\n        {rx: '35%', ry: \"35%\"},\n        {rx: '0%', ry: \"0%\"}\n    ];\n    \n    this.init = function () {\n        maskShape = s.ellipse('50%', '50%', '100%', '100%');\n    \n        maskShape.attr({\n            fill: \"white\"\n        });\n\n        maskElem.add(maskShape);\n\n        gText.attr({\n            mask: maskElem\n        });\n    }\n    \n    this.maskAnim = function () {\n//         console.log('- * - anim mask');\n        \n        if ( currentStep == steps.length ) {\n            setTimeout(reRun, 1000);\n            return;\n        }\n        \n        maskShape.animate(\n            steps[currentStep]\n            ,\n            300,\n            maskObj.maskAnim);\n        currentStep++;\n    }\n    \n    this.reset = function () {\n        currentStep = 0;\n        \n        var initState = {\n            rx: '100%', \n            ry: \"100%\"\n        };\n        \n        maskShape.attr(initState);\n    }\n}\n\nfunction createMask() {\n//     console.log('* - createMask');\n    maskObj = new maskObjInit;\n    maskObj.init();\n}\n\n// ------------------------------------\n\ncreatePattern();\ncreateText();\ncreateMask();\n\nfunction reRun() {\n    \n    maskObj.reset();\n    text.reset();\n}\n\n/*var wrapper = document.createElement(\"div\");\ndocument.body.appendChild(wrapper);\nwrapper.appendChild(s.node);*/"]},"metadata":{},"sourceType":"module"}